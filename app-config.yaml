app:
  title: TPB Dev Instance
  baseUrl: http://localhost:3000

organization:
  name: VMware

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  # This is for local developement only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}


appLiveView:
  activateAppLiveViewSecureAccessControl: true

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true
  '/app-live-view':
    target: http://application-live-view-5112.app-live-view.svc.cluster.local/api
    changeOrigin: true
    headers:
      X-Custom-Source: project-star


# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    local:
      # (Optional). Set this to specify where the generated documentation is stored.
      publishDirectory: '../../techdocs/generated_static_html'

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  allowGuestAccess: true
  providers: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, User, Group]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    # this location type is processed by @tpb/plugin-catalog-processor
    - type: system-x
      target: 'non empty string'

    - type: microsoft-graph-org
      target: https://graph.microsoft.com/v1.0

    - type: s3-discovery
      target: https://tpb-aws-s3-discovery-processor.dev.s3.us-east-1.amazonaws.com/

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes:
  customResources:
    - group: 'serving.knative.dev'
      apiVersion: 'v1'
      plural: 'configurations'
    - group: 'serving.knative.dev'
      apiVersion: 'v1'
      plural: 'revisions'
    - group: 'serving.knative.dev'
      apiVersion: 'v1'
      plural: 'routes'
    - group: 'serving.knative.dev'
      apiVersion: 'v1'
      plural: 'services'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clusterconfigtemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clusterdeliveries'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clusterdeploymenttemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clusterimagetemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clusterruntemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clustersourcetemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clustersupplychains'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'clustertemplates'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'deliverables'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'runnables'
    - group: 'carto.run'
      apiVersion: 'v1alpha1'
      plural: 'workloads'
    - group: 'source.toolkit.fluxcd.io'
      apiVersion: 'v1beta1'
      plural: 'gitrepositories'
    - group: 'conventions.carto.run'
      apiVersion: 'v1alpha1'
      plural: 'podintents'
    - group: 'kpack.io'
      apiVersion: 'v1alpha2'
      plural: 'images'
    - group: 'kpack.io'
      apiVersion: 'v1alpha2'
      plural: 'builds'
    - group: 'scanning.apps.tanzu.vmware.com'
      apiVersion: 'v1beta1'
      plural: 'sourcescans'
    - group: 'scanning.apps.tanzu.vmware.com'
      apiVersion: 'v1beta1'
      plural: 'scanpolicies'
    - group: 'scanning.apps.tanzu.vmware.com'
      apiVersion: 'v1beta1'
      plural: 'imagescans'
    - group: 'scanning.apps.tanzu.vmware.com'
      apiVersion: 'v1beta1'
      plural: 'scantemplates'
    - group: 'source.apps.tanzu.vmware.com'
      apiVersion: 'v1alpha1'
      plural: 'imagerepositories'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'taskruns'
    - group: 'kappctrl.k14s.io'
      apiVersion: 'v1alpha1'
      plural: 'apps'
    - group: 'networking.internal.knative.dev'
      apiVersion: 'v1alpha1'
      plural: 'serverlessservices'
    - group: 'autoscaling.internal.knative.dev'
      apiVersion: 'v1alpha1'
      plural: 'podautoscalers'
    - group: 'source.apps.tanzu.vmware.com'
      apiVersion: 'v1alpha1'
      plural: 'mavenartifacts'
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: config
      clusters:
        - url: http://127.0.0.1:61007
          name: host
          authProvider: serviceAccount
          serviceAccountToken:
          skipTLSVerify: true
# Use the properties below to customize the visible features.
# By default, features are visible if not set.
#customize:
#  features:
#    catalog:
#      enabled: true
#      showInSidebar: true
#    catalogGraph:
#      enabled: true
#    docs:
#      enabled: true
#      showInSidebar: true
#    search:
#      enabled: true
#      showInSidebar: true
#    apiDocs:
#      enabled: true
#      showInSidebar: true
#    settings:
#      enabled: true
#      showInSidebar: true
